#!/usr/bin/env python3
import argparse
import hashlib
import json
import logging
import pydoc
import sys
import time
from yangvoodoo.Describer import Yang2Text


parser = argparse.ArgumentParser(description="Combine a YANG schema with a supplied data payload.")
parser.add_argument("--yang", help="YANG module (should be on YANGPATH)", required=True)
parser.add_argument(
    "--data",
    help="A data tree (default XML) but can be set to JSON with --format",
    type=argparse.FileType("r"),
)
parser.add_argument("--plain", help="Plain Text", action="store_true")
parser.add_argument("--format", help="Data Tree format", choices=["xml", "json"], default="xml")
parser.add_argument("--search", help="Initial arguments for less paging", default="")
parser.add_argument("--schema-xpath", help="Show schema xpath's", action="store_true")
parser.add_argument("--data-xpath", help="Show data xpath's against leaves", action="store_true")
parser.add_argument("--term-width", help="Prefer a width of N characters", default=120, type=int)
parser.add_argument(
    "--min-block-width",
    help="Ensure a block of text is at least N characters wide",
    default=30,
    type=int,
)
parser.add_argument("--limit-revisions", help="Show upto N revisions", default=1, type=int)
parser.add_argument(
    "--hide-title",
    help="Hide module description and revisions",
    default=False,
    action="store_true",
)
parser.add_argument(
    "--hide-descriptions",
    help="Hide descriptions from nodes",
    default=False,
    action="store_true",
)
parser.add_argument(
    "--hide-types",
    help="Hide types of leaves",
    default=False,
    action="store_true",
)
parser.add_argument(
    "--legacy-pyang",
    help="Use a legacy pyang like output",
    default=False,
    action="store_true",
)
parser.add_argument(
    "--brief",
    help="Show the briefest output possible",
    default=False,
    action="store_true",
)
parser.add_argument(
    "--hide-constraints",
    help="hide must and when conditions",
    default=False,
    action="store_true",
)
parser.add_argument(
    "--enable-filter-list",
    help="Use a JSON file providing a list of schema XPATHs to filter it (and it's child nodes)",
    type=argparse.FileType("r"),
)


def do(args, log=None):
    if not log:
        log = logging.getLogger("yang2text")
        logging.basicConfig()
        log.setLevel(50)

    generator = Yang2Text(args.yang, log)
    if args.plain:
        generator.display = Yang2Text.DullDisplay

    generator.options = args
    if args.enable_filter_list:
        generator.set_schema_filter_list(json.loads(args.enable_filter_list.read()))
    if args.data:
        generator.process(self.options.data.read(), Yang2Text.FORMATS[args.format])
    else:
        generator.process()

    generator.result.seek(0)
    return generator.result


if __name__ == "__main__":
    args = parser.parse_args()

    if args.brief:
        args.hide_types = True
        args.hide_descriptions = True
        args.hide_title = True
        args.hide_constraints = True

    result = do(args)

    if args.search:
        pydoc.pipepager(result.read(), cmd=f"less -R -i -p {args.search}")
    else:
        pydoc.pipepager(result.read(), cmd=f"less -R -i ")
